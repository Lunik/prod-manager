
# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  PYTHON_VERSION: "3-alpine"
  PACKAGE_NAME: ProdManager
  SCAN_KUBERNETES_MANIFESTS: "true"
  SAST_EXCLUDED_PATHS: "tests, venv"
  SECRET_DETECTION_EXCLUDED_PATHS: "venv"
  DOCKER_DRIVER: overlay2

default:
  interruptible: true

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_REF_PROTECTED == "true"
    - if: '$CI_COMMIT_TAG'

include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml
  - template: Security/Container-Scanning.gitlab-ci.yml

# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/topics/caching/
#
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.
cache:
  paths:
    - .cache/pip
    - venv/

stages:
  - test
  - build
  - validate


.python-tests:
  stage: test
  image: python:$PYTHON_VERSION
  before_script:
    - apk add build-base
    - python --version  # For debugging
    - python -m venv venv
    - source venv/bin/activate
    - pip install -r requirements.dev.txt
    - pip install -r requirements.txt

test:
  extends: .python-tests
  rules:
    - if: ! $CI_COMMIT_REF_PROTECTED
      allow_failure: true
  script:
    - >
      pytest
      --cov --cov-report xml:coverage.xml
      --junitxml=result.xml
      tests/${PACKAGE_NAME}/
  artifacts:
    when: on_failure
    paths:
      - coverage.xml
      - result.xml
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
      junit: result.xml

lint:
  extends: .python-tests
  rules:
    - if: ! $CI_COMMIT_REF_PROTECTED
      allow_failure: true
  script:
    - >
      pylint
      ${PACKAGE_NAME}/*
      | tee pylint-report.txt
  artifacts:
    when: on_failure
    paths:
      - pylint-report.txt

scan:
  stage: test
  image: sonarsource/sonar-scanner-cli:latest
  needs:
    - lint
    - test
  script:
    - >
      sonar-scanner
      -Dsonar.branch.name="$CI_COMMIT_REF_NAME"

.image-tag: &image-tag |
  if [[ ! -z "$CI_COMMIT_TAG" ]]; then
    export tag="$CI_COMMIT_TAG"
  elif [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
    export tag="latest"
  else
    export tag="$CI_COMMIT_REF_SLUG"
  fi

image-build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_BUILDKIT: 1
  before_script:
    - >
      docker login
      -u "$CI_REGISTRY_USER"
      -p "$CI_REGISTRY_PASSWORD"
      $CI_REGISTRY
    - *image-tag
  # Default branch leaves tag empty (= latest tag)
  # All other branches are tagged with the escaped branch name (commit ref slug)
  script:
    - >
      docker image build
      --pull
      --tag "$CI_REGISTRY_IMAGE:${tag}"
      --file="docker/Dockerfile"
      .
    - docker image push "$CI_REGISTRY_IMAGE:${tag}"

container_scanning:
  stage: validate
  before_script:
    - *image-tag
    - export DOCKER_IMAGE="$CI_REGISTRY_IMAGE:${tag}"
  variables:
    GIT_STRATEGY: fetch
    DOCKERFILE_PATH: docker/Dockerfile
    CS_DISABLE_LANGUAGE_VULNERABILITY_SCAN: 'false'

.database_upgrade:
  extends: .python-tests
  stage: validate
  needs: []
  script:
    - flask db upgrade
    - PYTHONPATH=. python3 ProdManager/demo/init.py

database_upgrade_postgresql:
  extends: .database_upgrade
  services:
    - postgres:latest
  variables:
    POSTGRES_DB: prodmanager
    POSTGRES_USER: prodmanager
    POSTGRES_PASSWORD: changeit
    POSTGRES_HOST_AUTH_METHOD: trust
    PM_DATABASE_URI: postgresql://prodmanager:changeit@postgres/prodmanager


database_upgrade_sqlite:
  extends: .database_upgrade
